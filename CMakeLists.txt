##  Presage, an extensible predictive text entry system
##  ---------------------------------------------------
##
##  Copyright (C) 2008  Matteo Vescovi <matteo.vescovi@yahoo.co.uk>
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with this program; if not, write to the Free Software Foundation, Inc.,
##  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

cmake_minimum_required(VERSION 3.10)
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

project(Presage VERSION 0.9.2 LANGUAGES C CXX)

include(CheckIncludeFileCXX)
include(CheckIncludeFiles)
include(GNUInstallDirs)
include(GenerateExportHeader)
include(AddHeadersAndSources)

option(BUILD_TINYXML "Build tinyxml as part of presage" OFF)

set(VERSION "${PROJECT_VERSION}-beta")
set(PACKAGE "presage")
set(PACKAGE_STRING "${PACKAGE} ${VERSION}")
set(PACKAGE_BUGREPORT "'matteo.vescovi@yahoo.co.uk'")

set(CMAKE_CXX_STANDARD 17)
set(EXPORT_DIR ${CMAKE_BINARY_DIR}/include)
include_directories(${EXPORT_DIR})

check_include_file_cxx(string.h   HAVE_STRING_H)
check_include_file_cxx(stdlib.h   HAVE_STDLIB_H)
check_include_file_cxx(dirent.h   HAVE_DIRENT_H)
check_include_file_cxx(pwd.h      HAVE_PWD_H)
check_include_file_cxx(unistd.h   HAVE_UNISTD_H)
check_include_file_cxx(sys/stat.h HAVE_SYS_STAT_H)
check_include_file_cxx(tinyxml.h  HAVE_TINYXML_H)
check_include_file_cxx(ndir.h     HAVE_NDIR_H)
check_include_file_cxx(sys/ndir.h HAVE_SYS_NDIR_H)
check_include_file_cxx(pthread.h  HAVE_PTHREAD_H)

check_include_file_cxx(X11/X.h         HAVE_X11_X_H)
check_include_file_cxx(X11/Xlib.h      HAVE_X11_XLIB_H)
check_include_file_cxx(X11/Xproto.h    HAVE_X11_XPROTO_H)
check_include_file_cxx(X11/Xutil.h     HAVE_X11_XUTIL_H)
check_include_file_cxx(X11/keysymdef.h HAVE_X11_KEYSYMDEF_H)

check_include_files("X11/Xlib.h;X11/extensions/Xevie.h" HAVE_X11_EXTENSIONS_XEVIE_H)

find_package(TinyXML QUIET)
if (TinyXML_FOUND)
    add_definitions(${TinyXML_DEFINITIONS})
else()
    set(TinyXML_LIBRARIES tinyxml)
    set(BUILD_TINYXML ON)
endif()

find_package(SQLite QUIET)
if (SQLite_FOUND)
    set(HAVE_SQLITE_H 1)
    set(SQLITE_LIBS SQLite::SQLite)
    set(USE_SQLITE 1)
endif()

find_package(SQLite3 QUIET)
if (SQLite3_FOUND)
    set(HAVE_SQLITE3_H 1)
    set(SQLITE_LIBS SQLite::SQLite3)
    set(USE_SQLITE 1)
endif()

configure_file(config.h.cmake ${CMAKE_BINARY_DIR}/config.h)
add_definitions(-DHAVE_CONFIG_H)
configure_file(dirs.h.cmake ${CMAKE_BINARY_DIR}/dirs.h)
include_directories(${CMAKE_BINARY_DIR})

add_subdirectory(src)
add_subdirectory(test)
add_subdirectory(resources)
add_subdirectory(bindings)
add_subdirectory(apps)
add_subdirectory(doc)

#original Makefile.am contents follow:

#BUILT_SOURCES =	dirs.h
#CLEANFILES =	dirs.h
#
#dirs.h:	Makefile
#	@echo_win_native () { \
#		location="$$1"; \
#		unix_path="$$2"; \
#		\
#		native_windows_path="`mkdir -p $$unix_path && cd $$unix_path && pwd -W`"; \
#		native_windows_path="`echo $$native_windows_path | sed -e 's|/|\\\\\\\\|g'`"; \
#		\
#		echo "#define $$location \"$$native_windows_path\"" >> $@; \
#	}; \
#	\
#	case "`uname`" in \
#	  MINGW*) \
#		echo "// $@ generated by Makefile" > $@; \
#		echo_win_native "prefix" "$(prefix)"; \
#		echo_win_native "bindir" "$(bindir)"; \
#		echo_win_native "libdir" "$(libdir)"; \
#		echo_win_native "sysconfdir" "$(sysconfdir)"; \
#		echo_win_native "datadir" "$(datadir)"; \
#		echo_win_native "pkgdatadir" "$(pkgdatadir)"; \
#		echo_win_native "localstatedir" "$(localstatedir)"; \
#	  ;; \
#	  *) \
#		echo "// $@ generated by Makefile" > $@; \
#		echo '#define prefix "$(prefix)"' >> $@; \
#		echo '#define bindir "$(bindir)"' >> $@; \
#		echo '#define libdir "$(libdir)"' >> $@; \
#		echo '#define sysconfdir "$(sysconfdir)"' >> $@; \
#		echo '#define datadir "$(datadir)"' >> $@; \
#		echo '#define pkgdatadir "$(pkgdatadir)"' >> $@; \
#		echo '#define localstatedir "$(localstatedir)"' >> $@; \
#	  ;; \
#	esac;
#
#
#EXTRA_DIST =	FAQ
#
## Build Debian package
#debian: dist
#	case '$(DIST_ARCHIVES)' in \
#	*.tar.gz*) \
#	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) && \
#	  cp $(DIST_ARCHIVES) $(PACKAGE)_$(VERSION).orig.tar.gz ;;\
#	*.tar.bz2*) \
#	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) && \
#	  cp $(DIST_ARCHIVES) $(PACKAGE)_$(VERSION).orig.tar.bz2 ;;\
#	*.tar.Z*) \
#	  uncompress -c $(distdir).tar.Z | $(am__untar) && \
#	  cp $(DIST_ARCHIVES) $(PACKAGE)_$(VERSION).orig.tar.Z ;;\
#	*.shar.gz*) \
#	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar && \
#	  cp $(DIST_ARCHIVES) $(PACKAGE)_$(VERSION).orig.shar.gz ;;\
#	*.zip*) \
#	  unzip $(distdir).zip && \
#	  cp $(DIST_ARCHIVES) $(PACKAGE)_$(VERSION).orig.zip ;;\
#	esac
#	mkdir $(distdir)/debian
#	cp -R $(srcdir)/debian/* $(distdir)/debian/
#	(cd $(distdir) && \
#	  dpkg-buildpackage -us -uc -rfakeroot)
#
#debiancheck:
#	@echo 
#	@echo "==== Begin lintian check ===="
#	lintian $(PACKAGE)_$(VERSION)*.changes
#	@echo "==== End lintian check   ===="
#
#debianclean:
#	rm -f *.deb
#	rm -f $(PACKAGE)_$(VERSION)*.dsc
#	rm -f $(PACKAGE)_$(VERSION)*.changes
#	rm -f $(PACKAGE)_$(VERSION).orig.*
#	rm -f $(PACKAGE)_$(VERSION)*.diff.*
